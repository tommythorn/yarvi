All riscv-tests and compliance currently pass

- there's no IO
- Interrupts might be buggy
- Haven't been tested on FPGA




TODO: Update to 2.3 (draft) / 1.11 (draft) specs

- Find the CSRs needed to riscv-tests and which fields they use:

  ,mhartid DONE
  ,mcause
  ,medeleg

  medeleg,0
  medeleg,t0
  mie,0
  mideleg,0
  mepc,t0
  mstatus,0
  mtvec,t0
  pmpaddr0,t0
  pmpcfg0,t0
  satp,0
  stvec,t0

  Table 2.4: (Currently allocated machine-level CSRs)

      mvendorid
      marchid
      mimpid
      mhartid

      mstatus
      misa
      medeleg
      mideleg
      mie
      mtvec
      mcounteren

      mscratch
      mepc
      mcause
      mtval
      mip

  Table 2.5: (Currently allocated machine-level CSRs)

      mcycle
      minstret
      mcycleh
      minstreth

YARVI implements all of RV32I and some of the privileged subset.

To see the status, run testall in sim:

  $ make -s -C sim testall
  Basic UI tests:
    Total:   76
    Passing: 76
  Atomic tests:
    Total:   17
    Passing: 0
  Mul/Div tests:
    Total:   16
    Passing: 0
  Supervisor tests:
    Total:   15
    Passing: 2

The failures are expected, unimplemented features.

Problems with the current YARVI implementation and Verilog:

 - The structure is not ideal because Verilog makes it difficult to
   keep the updates together.  For example:

   * There are many conditions that can effect a pipeline restart,
     branches, hazards, exceptions, etc.  However, ex_restart can't be
     set in the same always block unless I keep everything in the same
     always block.

   * The instructions (and in general, field) parsing is ad-hoc and
     have had many mistakes.  Also importantly, it's difficult to trap
     on non-matches (a.k.a. illegal instructions).

   * Shifting "variables" around in time (say, from a combinatorial
     calculation to a one- or two-delayed), either require much
     rewrite or a convention where everything is held combinatorial
     and registers are explicitly assigned:

          wire [N:0] value0 = <big expressions>;
          reg  [N:0] value1 = 0; always @(posedge clock) value1 <= value0;
