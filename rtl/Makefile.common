# use `make V=1 ...`
V=
VERB=-DVERBOSE_SIMULATION
VERB1=-DVERBOSE_SIMULATION -DDISASSEMBLE
Q=@
Q1=
QUIET=$(Q$(V))

# Adjust to match your RISC-V toolchain
RVPATH=
RVPREFIX=$(RVPATH)riscv64-linux-gnu-
CC=$(RVPREFIX)gcc -std=gnu99 -O
MEMSIZEK=128

YARVISRC=htif.v yarvi_soc.v yarvi_disass.v yarvi.v yarvi_fe.v yarvi_ex.v \
         alu.v yarvi_dec_reg_usage.v yarvi_ld_align.v \
         yarvi_st_align.v
YARVIHDR=riscv.h
YARVICONFIG=-DXMSB=31 -DVMSB=31 -DPMSB=13 -DTIMEOUT=16000 $(VERB$(V))

%.txt: %.bin
	(cat $^;cat /dev/zero)|dd iflag=fullblock bs=1k count=$(MEMSIZEK)|hexdump -ve '"%08x\n"' > $@
	cut -c1-2 $@ > mem3.txt
	cut -c3-4 $@ > mem2.txt
	cut -c5-6 $@ > mem1.txt
	cut -c7-8 $@ > mem0.txt
	cp $(COMMON)initregs.txt .

%.riscv: $(COMMON)crt0.o %.o
	$(RVPREFIX)ld -T$(COMMON)yarvi.ld -melf64lriscv -o $@ $^
	$(RVPREFIX)objdump -sd $^ > $^.dis

%.bin: %.riscv
	$(RVPREFIX)objcopy -O binary $^ $@

%.riscv.dis: %.riscv
	$(RVPREFIX)objdump -d $^ > $@
